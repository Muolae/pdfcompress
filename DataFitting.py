import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
plt.rcParams['font.sans-serif'] = ['SimHei']  # 设置字体为黑体
plt.rcParams['axes.unicode_minus'] = False  # 解决负号显示问题

def log_func(x, a, b,c):
    return a * np.exp(b * x) + c
# 示例数据
ls=[
    [41.20971353616023, 0.14235761430528426],
    [39.675844713681116, 0.10875306306061922],
    [38.55005521334311, 0.09224591431794342],
    [37.68051454137488, 0.08141365757694949],
    [36.951460349670256, 0.0728831821017795],
    [36.3340264041647, 0.06567884374547887],
    [35.85411710838819, 0.060719984549063216],
    [35.39681624785624, 0.056702437224211505],
    [34.99675673210708, 0.052807313424569575],
    [34.61713592991402, 0.04969558009394893],
    [34.27577311455852, 0.04703652417218244],
    [33.976499607494866, 0.04464485027171947],
    [33.713463874291214, 0.04272407955593533],
    [33.47155750203893, 0.040851133841055404],
    [33.24402661515936, 0.039335745352285865],
    [33.02745826537622, 0.037802731549298314],
    [32.81939697112073, 0.036369253087926795],
    [32.602220727928874, 0.03506402616147642],
    [32.35241944321839, 0.03354443444146051],
    [32.07138915105319, 0.03204158500388817],
    [31.518031244088913, 0.02943261464436849],
    [31.06508584956377, 0.02675533294677734],
    [30.614848216110712, 0.024297749554669415],
    [30.11538833131431, 0.021602312723795574],
    [29.58450719625044, 0.019274287753634985],
    [29.08346764860089, 0.017219472814489295],
    [28.534568952194032, 0.015115278738516348],
    [27.98117808194189, 0.013141314188639319],
    [27.437141638596447, 0.011078057465729894],
    [26.839802560911384, 0.009351765667950665],
    [26.298579877573996, 0.00790285181116175],
    [25.738868995733934, 0.006509074458369503],
    [25.182136934994407, 0.005244608278627748],
    [24.601205235648838, 0.004034501534921152],
    [23.931676125899042, 0.0029942194620768228],
    [23.266608140519125, 0.002226476316098813],
    [22.446597460875964, 0.0015667809380425345],
    [21.45223555976626, 0.001046392652723524],
    [19.927531971848435, 0.0006894712094907407],
]
ls.reverse()
data2 = np.array(ls)


# 提取自变量和因变量
x = data2[:, 0]  # 第一列是自变量
y = data2[:, 1]  # 第二列是因变量 y

# 进行三次函数拟合，deg=3表示三次多项式
# coefficients = np.polyfit(x, y, deg=3)
#
# # 生成拟合的多项式函数
# poly_function = np.poly1d(coefficients)

initial_guess = [0.1, 0.1, 10]  # 初始猜测值
params, covariance = curve_fit(log_func, x, y, p0=initial_guess)

# 提取拟合参数
a, b, c = params
print("拟合参数: a =", a, ", b =", b, ", c =", c)

# 生成拟合曲线
x_fit = np.linspace(min(x), max(x), 100)
y_fit = log_func(x_fit, a, b, c)


# 压缩率拟合的多项式系数: [ 4.56782987e-05 -5.13415642e-03  2.08056549e-01  7.75573123e-03]
# PSNR拟合的多项式系数: [ 6.48749441e-05 -9.71820425e-03  5.33694697e-01  2.17035483e+01]
#
# 绘制原始数据点和拟合曲线
plt.scatter(x, y, label='原始数据')
plt.plot(x_fit, y_fit, label='拟合曲线', color='red')
plt.xlabel('PSNR')
plt.ylabel('图片压缩率')
plt.legend()
plt.title('图片压缩率拟合')
plt.show()
