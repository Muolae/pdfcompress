计算单一图片的压缩参数与压缩率,PSNR,SSIM的关系
inf = "./src/6c.jpg"
of = "./out/out.jpg"
img=Image.open(inf)
b_size = img.height*img.width*3 // 1024
for i in range(1,48):
    lossness_compress(inf, of, compress_rate=0, quality=i*2-1)
    a_size = os.path.getsize(of) // 1024
    ssim=GetSSIM(inf,of)
    psnr=GetPSNR(inf,of)
    print(f"[{i*2-1},{a_size/b_size},{ssim},{psnr}],")

计算多个图片的均值参数
import os

from PIL import Image

from compressEvaluate import GetSSIM,GetPSNR
from picCompress import lossness_compress

import matplotlib.pyplot as plt
from scipy.interpolate import make_interp_spline

plt.rcParams['font.sans-serif'] = ['SimHei']  # 设置字体为黑体
plt.rcParams['axes.unicode_minus'] = False  # 解决负号显示问题

of = "./out/out.jpg"
with open('./src/Kodak-Lossless-True-Color-Image-Suite-master/datalog.txt', 'w') as f:
    for i in range(0,20):
        avg_compress_rate=0
        avg_psnr=0
        avg_ssim=0
        for pngid in range(1, 25):
            datafiledir = f"./src/Kodak-Lossless-True-Color-Image-Suite-master/PhotoCD_PCD0992/{pngid}.png"
            img = Image.open(datafiledir)
            b_size = img.height * img.width * 3 // 1024

            lossness_compress(datafiledir, of, compress_rate=0, quality=i*5)

            a_size = os.path.getsize(of) // 1024
            ssim=GetSSIM(datafiledir,of)
            psnr=GetPSNR(datafiledir,of)

            f.write(f"fileid:{pngid},quality:{i*5},compressRate:{a_size/b_size},psnr:{psnr},ssim:{ssim}\n")
            avg_compress_rate+=a_size/b_size
            avg_psnr+=psnr
            avg_ssim+=ssim
        print(f"[{i*5},{avg_compress_rate/24},{avg_psnr/24},{avg_ssim/24}],")

对数函数拟合
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# 定义对数函数模型
def log_func(x, a, b):
    return a * np.log(x) + b

# 示例数据
x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
y = np.array([2, 3, 4, 5, 6, 7, 8, 9, 10, 11])

# 使用 curve_fit 进行拟合
params, covariance = curve_fit(log_func, x, y)

# 提取拟合参数
a, b = params
print("拟合参数: a =", a, ", b =", b)

# 生成拟合曲线
x_fit = np.linspace(min(x), max(x), 100)
y_fit = log_func(x_fit, a, b)

# 绘制原始数据点和拟合曲线
plt.scatter(x, y, label='原始数据')
plt.plot(x_fit, y_fit, label='对数拟合曲线', color='red')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.title('对数函数拟合')
plt.show()

# from compressEvaluate import GetPSNR,GetSSIM
from picCompress import compress_by_quality,compress_by_size
#
# print(GetSSIM("src/6c.jpg","out/out.jpg"))
#
#
# # compress_by_quality("src/6c.jpg","out/out1.jpg",quality=72)
# print(GetSSIM("src/6c.jpg","out/out1.jpg"))



data = np.array([
    [0, 0.006763599537037039, 21.475023927050415, 0.5536042354778425],
    [5, 0.008752893518518517, 23.85221750663385, 0.6604142806945952],
    [10, 0.013274016203703705, 26.67182036133066, 0.7694734508262503],
    [15, 0.0171802662037037, 28.14477805517322, 0.8197081162234813],
    [20, 0.020833333333333332, 29.14454484949287, 0.8494737341539751],
    [25, 0.024016203703703703, 29.89256142585352, 0.8686811766478305],
    [30, 0.02712673611111111, 30.491472872108307, 0.8828302359950747],
    [35, 0.029911747685185185, 31.012955364987842, 0.89348163563945],
    [40, 0.03222656249999999, 31.422047307855873, 0.9012531763064575],
    [45, 0.03486689814814814, 31.822081522446414, 0.9083552518098658],
    [50, 0.03736255787037037, 32.17381570095742, 0.9140761136120815],
    [55, 0.03967737268518518, 32.515361173758855, 0.9191574554393291],
    [60, 0.04267939814814816, 32.90757794140709, 0.9247284120079815],
    [65, 0.04644097222222223, 33.359623440056644, 0.9306243439899263],
    [70, 0.051251446759259266, 33.916748090481704, 0.9371584792550656],
    [75, 0.05656828703703704, 34.52213057457712, 0.9434488509974693],
    [80, 0.06499565972222222, 35.369984720838254, 0.9511621085718529],
    [85, 0.0769314236111111, 36.46154295541892, 0.9595127335104677],
    [90, 0.09729456018518519, 38.03397334163549, 0.9691044564438646],
    [95, 0.1408420138888889, 40.56040907935196, 0.9803567303593274],
])

data2 = np.array([
    [1, 0.005787037037037037, 0.892659839249048, 22.992198175816196],
    [3, 0.005859375, 0.896448731426784, 23.07986792455376],
    [5, 0.006221064814814815, 0.8844183310952772, 25.696008712595408],
    [7, 0.006582754629629629, 0.9144199636124067, 28.961003588984656],
    [9, 0.006908275462962963, 0.9294669670950211, 30.832517209944356],
    [11, 0.007197627314814815, 0.9323726002138205, 31.534711305025564],
    [13, 0.007523148148148148, 0.9370569795965963, 32.15459767490006],
    [15, 0.0078125, 0.9411905143224927, 32.68788396912278],
    [17, 0.00806568287037037, 0.9469217308174286, 33.21395143314777],
    [19, 0.008318865740740741, 0.9515009837918696, 34.02269242376725],
    [21, 0.008572048611111112, 0.9540669065109473, 34.522337686815966],
    [23, 0.00882523148148148, 0.9558806255817952, 34.742810268930185],
    [25, 0.009078414351851851, 0.9573596740422509, 34.94004370290454],
    [27, 0.009331597222222222, 0.9609239239393689, 35.487113370716166],
    [29, 0.00951244212962963, 0.9620950777834906, 35.80489367183096],
    [31, 0.009765625, 0.9640489405561299, 36.0660373715446],
    [33, 0.009982638888888888, 0.9656551429289933, 36.40728368988308],
    [35, 0.010199652777777778, 0.9664844956726037, 36.57392852659316],
    [37, 0.010380497685185185, 0.9674155038832972, 36.65756528068863],
    [39, 0.010597511574074073, 0.9682871990437691, 36.905937870835515],
    [41, 0.01077835648148148, 0.9699106274791137, 37.252051101126334],
    [43, 0.010923032407407407, 0.9702673160357979, 37.37275860499427],
    [45, 0.011140046296296295, 0.9708981986409109, 37.4744385522216],
    [47, 0.011320891203703705, 0.9717439608804314, 37.70443663854299],
    [49, 0.011537905092592593, 0.9726797482131069, 37.912653758020845],
    [51, 0.011610243055555556, 0.9728462888698673, 38.01219059788703],
    [53, 0.011863425925925927, 0.9734391783279305, 38.19991226782585],
    [55, 0.012044270833333334, 0.9741710553527488, 38.33153527499459],
    [57, 0.012297453703703705, 0.9746015631037398, 38.48101485208909],
    [59, 0.012514467592592593, 0.9754009955527577, 38.71027856160871],
    [61, 0.012803819444444444, 0.9759249761530513, 38.85552836352066],
    [63, 0.013057002314814815, 0.9762815640014777, 39.01441139212117],
    [65, 0.013382523148148149, 0.977205115215213, 39.25429148187665],
    [67, 0.01363570601851852, 0.9775423448975541, 39.49029403364977],
    [69, 0.014105902777777778, 0.978258538654459, 39.70937095800308],
    [71, 0.014503761574074073, 0.979234073001447, 39.99064277244845],
    [73, 0.015010127314814815, 0.9798043220136567, 40.22499601262166],
    [75, 0.015407986111111112, 0.9804332221041694, 40.49176800968954],
    [77, 0.016022858796296297, 0.9814036642928209, 40.889339891827454],
    [79, 0.01667390046296296, 0.9817177182164268, 41.07956302202925],
    [81, 0.017469618055555556, 0.982234095392127, 41.41994302787185],
    [83, 0.01862702546296296, 0.9829090430615067, 41.79078776042239],
    [85, 0.019639756944444444, 0.9836357295098126, 42.226684142569546],
    [87, 0.021122685185185185, 0.9842352704750548, 42.57501369959539],
    [89, 0.023292824074074073, 0.9847710132943472, 43.065336305861656],
    [91, 0.027018229166666668, 0.985772433876508, 43.69284161025853],
    [93, 0.03269675925925926, 0.9865654780697958, 44.273936354666084]
])


import os

from picCompress import compress_by_quality
from compressEvaluate import GetPSNR, GetSSIM


def compress_by_mozjpeg(in_path, out_path, quality):
    os.system(f"cjpeg -quality {quality} -optimize {in_path} > {out_path}")


dv = [0, 5, 15, 25, 35, 40, 45, 50, 54, 58, 61, 63, 65, 67, 70, 71, 72, 74, 76, 77, 79, 80, 81, 82, 84, 86, 88, 89, 90,
      91, 92, 93, 95, 97, 100]

for i in dv:
    compress_by_quality("src/Kodak-Lossless-True-Color-Image-Suite-master/Image_jpeg/2.jpg", "out/out.jpg",  i)
    size = os.path.getsize("out/out.jpg") / 1024
    psnr = GetPSNR("src/Kodak-Lossless-True-Color-Image-Suite-master/Image_jpeg/2.jpg", "out/out.jpg")
    ssim = GetSSIM("src/Kodak-Lossless-True-Color-Image-Suite-master/Image_jpeg/2.jpg", "out/out.jpg")
    print(f"[{i},{size},{psnr},{ssim}],")


import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import make_interp_spline

plt.rcParams['font.sans-serif'] = ['SimHei']  # 设置字体为黑体
plt.rcParams['axes.unicode_minus'] = False  # 解决负号显示问题
# 假设数据存储在一个二维数组中，每行格式为：[x, y1, y2, y3]
data = np.array([
    [0, 1.6796875, 17.898918056024172, 0.5217615677203437],
    [5, 3.48828125, 24.330229159398876, 0.644323352357663],
    [15, 9.1279296875, 28.81666271047758, 0.8059150414253088],
    [25, 14.1162109375, 30.77058451627831, 0.856463335702525],
    [35, 18.4951171875, 31.959121783863043, 0.8832141435362351],
    [40, 20.5146484375, 32.424156061481554, 0.8921491530253958],
    [45, 22.4453125, 32.838130126968224, 0.8988191202515918],
    [50, 24.412109375, 33.21786127951754, 0.9044095385471813],
    [54, 25.74609375, 33.481717514481396, 0.908600098289094],
    [58, 27.8447265625, 33.81733804933706, 0.9132410157852157],
    [61, 29.396484375, 34.05745488887077, 0.9165463891371782],
    [63, 30.1328125, 34.24888863815586, 0.9186075306011352],
    [65, 31.55078125, 34.46952725549644, 0.9213120099226343],
    [67, 32.5869140625, 34.66557547148726, 0.9234461350325055],
    [70, 34.966796875, 35.00616933811238, 0.9274709388746922],
    [71, 36.28515625, 35.154600832726395, 0.9291964604231623],
    [72, 36.9072265625, 35.28582579995709, 0.9303869607494956],
    [74, 39.2607421875, 35.58278982730039, 0.9336266171298934],
    [76, 40.3896484375, 35.79641715687907, 0.9353700427052161],
    [77, 42.7451171875, 35.97510084441425, 0.9373511738357814],
    [79, 44.470703125, 36.26019820555173, 0.9394912372798047],
    [80, 51.5087890625, 36.68911593790288, 0.9429253310017277],
    [81, 52.578125, 36.85533319192342, 0.9441812109540445],
    [82, 54.58984375, 37.05546891111879, 0.9458701039790478],
    [84, 59.37890625, 37.45156900536335, 0.9489511334505889],
    [86, 65.583984375, 37.90181803169892, 0.9522781341098674],
    [88, 71.8154296875, 38.43592852025201, 0.9560983898650197],
    [89, 74.8193359375, 38.72149837072513, 0.9577194612351017],
    [90, 95.79296875, 39.50774518751995, 0.9624788759900903],
    [91, 100.5693359375, 39.842970086973, 0.964220271540955],
    [92, 108.560546875, 40.29386453441592, 0.9669614483826708],
    [93, 121.455078125, 40.75555431469235, 0.9693463750548497],
])

data2 = np.array([
    [0, 12.2294921875, 23.06132300426356, 0.6011377440393566],
    [5, 13.95703125, 25.082367273522117, 0.6904272151940815],
    [15, 21.08203125, 30.125099907297354, 0.8378560829891777],
    [25, 27.2978515625, 32.08244555020945, 0.8813918278649874],
    [35, 32.7666015625, 33.29545535040775, 0.9027567372248128],
    [40, 35.0107421875, 33.757792776193945, 0.909899218764742],
    [45, 37.6015625, 34.17810917931172, 0.9153492079113607],
    [50, 40.033203125, 34.52508246307176, 0.9201913121088777],
    [54, 41.845703125, 34.82142250911995, 0.9236782535088199],
    [58, 44.5048828125, 35.14599747891667, 0.9277236189255781],
    [61, 46.3095703125, 35.39836880260811, 0.9300652640107753],
    [63, 47.818359375, 35.564881827971384, 0.9317109435504362],
    [65, 49.3056640625, 35.753295937062134, 0.9339942798715333],
    [67, 50.9150390625, 35.979894067905256, 0.9359272919008049],
    [70, 54.44140625, 36.32145751199552, 0.9392524512431583],
    [71, 55.716796875, 36.45584334421419, 0.9404744397652239],
    [72, 56.5673828125, 36.555893599308284, 0.941341748181654],
    [74, 60.0654296875, 36.84839206674662, 0.9440821331392026],
    [76, 61.9951171875, 37.101013265456004, 0.945849699500705],
    [77, 64.619140625, 37.30150241135134, 0.9477746626180551],
    [79, 67.9111328125, 37.53902941934518, 0.9493544120681824],
    [80, 70.275390625, 37.718735338441384, 0.9506886317134763],
    [81, 72.9619140625, 37.93539809710342, 0.9523548466018122],
    [82, 75.431640625, 38.10650310774222, 0.9534400089373775],
    [84, 81.4375, 38.50856270762874, 0.9562905560945983],
    [86, 88.7138671875, 39.000016734125765, 0.9595124356132155],
    [88, 98.3291015625, 39.52213395187891, 0.9624960421931924],
    [89, 102.3671875, 39.80359452887105, 0.9640528129768353],
    [90, 109.80078125, 40.1542076471361, 0.9660706214453638],
    [91, 117.275390625, 40.52455852819624, 0.9681255596721479],
    [92, 124.322265625, 40.88185416478523, 0.9697824262099987],
    [93, 135.748046875, 41.33516039988219, 0.97203363186298],

])
# 提取自变量和因变量
x = data[:, 1]  # 第一列是自变量
y1 = data[:, 3]  # 第二列是因变量 y1
# y3 = data2[:, 1]  # 第三列是因变量 y2
x2 = data2[:, 1]  # 第一列是自变量
y2 = data2[:, 3]  # 第四列是因变量 y3

# 生成平滑曲线的插值点
x_smooth = np.linspace(min(x), max(x), 300)  # 生成更密集的 x 值用于平滑曲线

# 对每条曲线进行样条插值
spline1 = make_interp_spline(x, y1, k=3)  # k=3 表示三次样条
y1_smooth = spline1(x_smooth)

x2_smooth = np.linspace(min(x2), max(x2), 300)  # 生成更密集的 x 值用于平滑曲线
spline2 = make_interp_spline(x2, y2, k=3)
y2_smooth = spline2(x2_smooth)
#
# spline3 = make_interp_spline(x, y3, k=3)
# y3_smooth = spline3(x_smooth)

# 绘制原始数据和平滑曲线
plt.scatter(x, y1, label='moz', color='blue')
plt.plot(x_smooth, y1_smooth, label='', color='blue', linestyle='-')


# 绘制原始数据和平滑曲线
plt.scatter(x2, y2, label='PIL', color='red')
plt.plot(x2_smooth, y2_smooth, label='', color='red', linestyle='-')

# 绘制单个的点
# plt.plot(20,30,'ro')
# plt.plot(25,35,'ro')

# plt.scatter(x, y2, label='图片2压缩率', color='green')
# plt.plot(x_smooth, y2_smooth, label='图片2插值曲线', color='green', linestyle='-')

# plt.scatter(x, y3, label='ssim', color='red')
# plt.plot(x_smooth, y3_smooth, label='SSIM插值曲线', color='red', linestyle='-')

plt.ylabel('PSNR')
plt.xlabel('size')
plt.legend()
plt.title('PSNR与压缩大小变化关系')
plt.grid(True)
plt.show()

import os
from PIL import Image
from PIL import ImageFile
# 压缩图片文件
from PIL.Image import Resampling
from compressEvaluate import GetPSNR, GetSSIM
from picCompress import compress_by_size, compress_by_quality


# TODO 无法压缩会进入死循环
def compress_image(infile, outfile, mb=150, quality=95, k=0.9):  # 通常你只需要修改mb大小
    """不改变图片尺寸压缩到指定大小
    :param outfile: 压缩文件保存地址
    :param mb: 压缩目标，KB
    :param k: 每次调整的压缩比率
    :param quality: 初始压缩比率
    :return: 压缩文件地址，压缩文件大小
    """

    o_size = os.path.getsize(infile) // 1024  # 函数返回为字节，除1024转为kb（1kb = 1024 bit）
    print('before_size:{} after_size:{}'.format(o_size, mb))
    if o_size <= mb:
        return outfile

    ImageFile.LOAD_TRUNCATED_IMAGES = True  # 防止图像被截断而报错

    while o_size > mb:
        im = Image.open(infile)
        # rgbim = im.convert('RGB')
        x, y = im.size
        out = im.resize((int(x * k), int(y * k)), Resampling.LANCZOS)  # 最后一个参数设置可以提高图片转换后的质量
        try:
            out = out.convert('RGB')  # 删除不支持的通道
            out.save(outfile, quality=quality)  # quality为保存的质量，从1（最差）到95（最好），此时为85
        except Exception as e:
            print(e)
            break
        o_size = os.path.getsize(outfile) // 1024
        print("本轮压缩后图片大小:", o_size)
    return outfile


def resize_with_aspect(input_path, output_path, base_width=None, base_height=None):
    """
    保持宽高比调整图片大小
    :param input_path: 输入图片路径
    :param output_path: 输出图片路径
    :param base_width: 基于宽度调整(可选)
    :param base_height: 基于高度调整(可选)
    """
    with Image.open(input_path) as img:
        width, height = img.size
        if base_width is not None:
            # 基于宽度调整
            wpercent = (base_width / float(width))
            hsize = int((float(height) * float(wpercent)))
            new_size = (base_width, hsize)
        elif base_height is not None:
            # 基于高度调整
            hpercent = (base_height / float(height))
            wsize = int((float(width) * float(hpercent)))
            new_size = (wsize, base_height)
        else:
            raise ValueError("必须指定base_width或base_height")

        resized_img = img.resize(new_size, Image.LANCZOS)
        resized_img.save(output_path, quality=94)


def compress_X(input_path, output_path, dpiloss, quality):
    qual = quality
    with Image.open(input_path) as img:
        width, height = img.size
        new_size = (int(width * dpiloss), int(height * dpiloss))
        resized_img = img.resize(new_size, Image.LANCZOS)
        resized_img.save(output_path, quality=quality)
    return qual


def compress_test_quality(input_path, output_path, dpiloss, quality, target):
    qual = quality
    while qual >= 0:
        with Image.open(input_path) as img:
            width, height = img.size
            new_size = (int(width * dpiloss), int(height * dpiloss))
            resized_img = img.resize(new_size, Image.LANCZOS)
            resized_img.save(output_path, quality=qual)
            if os.path.getsize(output_path) // 1024 < target:
                break
            else:
                qual -= 1
    return qual


def compress_test_dpi(input_path, output_path, quality, target):
    dpiloss = 0.99
    while dpiloss >= 0.01:
        with Image.open(input_path) as img:
            width, height = img.size
            new_size = (int(width * dpiloss), int(height * dpiloss))
            resized_img = img.resize(new_size, Image.LANCZOS)
            resized_img.save(output_path, quality=quality)
            if os.path.getsize(output_path) // 1024 < target:
                break
            else:
                dpiloss -= 0.01
    return dpiloss


spath = 'src/Kodak-Lossless-True-Color-Image-Suite-master/Image_jpeg/3.jpg'


def test1():
    for i in range(1, 10):
        print("dpi:", 0.0 + 0.1 * i, "quality:", compress_test_quality(spath, 'out/out.jpg', 0.0 + 0.1 * i, 95, 15))
        print(os.path.getsize('out/out.jpg') // 1024, GetPSNR(spath, 'out/out.jpg', reshape=True))


def test2():
    i=94
    while i>=0:
        # 计算24张图片的平均PSNR
        psnr=0.0
        for index in range(1,25):
            path=f'src/Kodak-Lossless-True-Color-Image-Suite-master/Image_jpeg/{index}.jpg'
            compress_test_dpi(path, 'out/out.jpg', i, 20)
            psnr+=GetPSNR(path, 'out/out.jpg', reshape=True)
        psnr=psnr/24
        print(f"[{i},{psnr}]")
        i-=2

test2()
# 绘图:自变量quality,因变量psnr
# for i in range(1,10):
#     print(0.1*i)
# 使用示例 - 调整宽度为500，高度按比例计算
# resize_with_aspect('input.jpg', 'output.jpg', base_width=500)
# 压缩分辨率
# resize_with_aspect('src/Kodak-Lossless-True-Color-Image-Suite-master/Image_jpeg/1.jpg','out/out.jpg',base_height=128)
# jpeg方式压缩

# compress_by_size(spath,'out/out1.jpg',compress_rate=9.0/547)
# compress_by_quality('src/Kodak-Lossless-True-Color-Image-Suite-master/Image_jpeg/1.jpg','out/out1.jpg',quality=0)
# # 计算损失
# print(GetSSIM('src/Kodak-Lossless-True-Color-Image-Suite-master/Image_jpeg/1.jpg','out/out.jpg',reshape=True))
# print(GetSSIM('src/Kodak-Lossless-True-Color-Image-Suite-master/Image_jpeg/1.jpg','out/out1.jpg',reshape=True))
# print(GetPSNR('src/Kodak-Lossless-True-Color-Image-Suite-master/Image_jpeg/1.jpg','out/out.jpg',reshape=True))
# print(GetPSNR('src/Kodak-Lossless-True-Color-Image-Suite-master/Image_jpeg/1.jpg','out/out1.jpg',reshape=True))

20KB
data="""0.3329166666666661,94,26.764466516936537
0.36541666666666606,92,27.194198702583975
0.38624999999999937,90,27.416509804632934
0.4099999999999995,88,27.68148070480738
0.429583333333333,86,27.883705617778606
0.44791666666666613,84,28.03500705725378
0.46708333333333285,82,28.211020215090443
0.4829166666666662,80,28.32620284926207
0.4966666666666662,78,28.406660530167485
0.5154166666666662,76,28.564595379014097
0.5237499999999995,74,28.574094230782602
0.5420833333333329,72,28.72173971048714
0.5516666666666663,70,28.744975657614024
0.5666666666666663,68,28.83236361768421
0.5779166666666663,66,28.86339274729276
0.589583333333333,64,28.918488954681866
0.6004166666666663,62,28.96140188062998
0.6116666666666664,60,29.003588817252602
0.6195833333333329,58,29.026135102850436
0.632083333333333,56,29.084113449075204
0.6429166666666662,54,29.123510601929723
0.6512499999999998,52,29.15030827657425
0.6595833333333331,50,29.15335821180813
0.6708333333333331,48,29.18255968944663
0.6791666666666666,46,29.199014685618423
0.6887499999999998,44,29.210791008861126
0.7012499999999996,42,29.20701898916241
0.7154166666666661,40,29.235991471244944
0.7274999999999996,38,29.26158910534015
0.7399999999999998,36,29.251586097774126
0.7591666666666664,34,29.269764645552886
0.7754166666666666,32,29.234667068533554
0.7904166666666663,30,29.218696275508236
0.8095833333333332,28,29.203156353430284
0.8329166666666667,26,29.15600443848062
0.8529166666666667,24,29.109369992806563
0.8733333333333332,22,28.998574994184324
0.8937499999999999,20,28.849736420140058
0.9095833333333331,18,28.656034417894674
0.9304166666666663,16,28.38828331778717
0.9466666666666664,14,28.015746153005264
0.9649999999999997,12,27.552172701528942
0.9758333333333331,10,26.947250962503322
0.987083333333333,8,26.153221717710775
0.9899999999999997,6,24.95772280709923
0.9899999999999997,4,23.024921825355264
0.9899999999999997,2,21.621915738784512
0.9899999999999997,0,21.619314602745742"""

15KB
0.2783333333333327,94,25.878355434491557
0.3058333333333328,92,26.246736605215716
0.324166666666666,90,26.437567502025747
0.3416666666666661,88,26.6262831489849
0.3583333333333328,86,26.78788097825266
0.37583333333333274,84,26.939129749398003
0.39083333333333276,82,27.061600144577454
0.40583333333333277,80,27.18101854088792
0.41583333333333283,78,27.240170597534135
0.43083333333333296,76,27.36430486671053
0.43999999999999956,74,27.41191027020197
0.45416666666666616,72,27.505136137279766
0.46499999999999964,70,27.57308044507455
0.4749999999999995,68,27.616324681092525
0.48249999999999943,66,27.6374130423042
0.4949999999999995,64,27.7150152197017
0.5024999999999996,62,27.72477798066008
0.5116666666666663,60,27.76372934878737
0.5208333333333328,58,27.80214983116635
0.5299999999999995,56,27.832136332056624
0.5391666666666663,54,27.885138811165437
0.5474999999999997,52,27.91278622738326
0.553333333333333,50,27.907546715408916
0.5633333333333329,48,27.949030284712254
0.5666666666666663,46,27.933296399649624
0.5791666666666664,44,27.987185020945997
0.5891666666666663,42,27.991063204167194
0.5999999999999996,40,28.013131583347842
0.6091666666666663,38,28.03213244453492
0.6216666666666663,36,28.061668113739312
0.6349999999999996,34,28.052656959536776
0.650833333333333,32,28.090061869798873
0.6649999999999998,30,28.083044545356383
0.6816666666666665,28,28.07722382084849
0.6991666666666664,26,28.040019672373333
0.7199999999999996,24,28.042455635101955
0.7474999999999999,22,28.01490906906196
0.7733333333333333,20,27.941102659476382
0.8024999999999998,18,27.86476618998168
0.8366666666666664,16,27.72676020560884
0.8699999999999998,14,27.491593284681873
0.9025,12,27.155550322359414
0.9341666666666665,10,26.687645100776905
0.9633333333333329,8,26.015080317025518
0.9808333333333331,6,24.91290929821928
0.9899999999999997,4,23.024921825355264
0.9899999999999997,2,21.621915738784512
0.9899999999999997,0,21.619314602745742

25KB
0.37666666666666604,94,27.486096113499972
0.4091666666666662,92,27.896055479482765
0.43166666666666625,90,28.16116010708136
0.46083333333333293,88,28.501612768623644
0.48166666666666597,86,28.692058716196954
0.5041666666666663,84,28.913419284331866
0.5258333333333328,82,29.100404291329184
0.545833333333333,80,29.258697974640203
0.558333333333333,78,29.313503086464653
0.5799999999999996,76,29.49409793469994
0.593333333333333,74,29.562912866615452
0.608333333333333,72,29.625849656328487
0.623333333333333,70,29.711628659158333
0.6374999999999996,68,29.78091765290976
0.6491666666666663,66,29.80617415763659
0.665833333333333,64,29.89240219379739
0.6766666666666666,62,29.915246376424964
0.6899999999999998,60,29.97956185949779
0.6991666666666663,58,29.98484066983862
0.7149999999999999,56,30.064102826067906
0.723333333333333,54,30.051206226076875
0.735833333333333,52,30.097621832833344
0.7458333333333332,50,30.093916537823706
0.7583333333333332,48,30.106191383272982
0.7658333333333331,46,30.108262614532176
0.7766666666666665,44,30.11242715753985
0.7916666666666664,42,30.117389227560736
0.808333333333333,40,30.143303133493248
0.8208333333333332,38,30.153309642719748
0.8341666666666666,36,30.13450194591059
0.8524999999999997,34,30.11865465610238
0.860833333333333,32,30.018947422495582
0.8766666666666664,30,29.973274131096375
0.890833333333333,28,29.903486824376852
0.9033333333333333,26,29.773268356322955
0.9166666666666666,24,29.64594401316997
0.9308333333333332,22,29.47360599572761
0.9416666666666664,20,29.242567936653685
0.9516666666666663,18,28.98594957458801
0.9658333333333329,16,28.652315773517085
0.9749999999999998,14,28.21431537234054
0.9824999999999996,12,27.677274825742916
0.9899999999999997,10,27.039793141481415
0.9899999999999997,8,26.171070111167722
0.9899999999999997,6,24.95772280709923
0.9899999999999997,4,23.024921825355264
0.9899999999999997,2,21.621915738784512
0.9899999999999997,0,21.619314602745742

psnr与图片压缩率变化数据
"""
[41.20971353616023,0.14235761430528426],
[39.675844713681116,0.10875306306061922],
[38.55005521334311,0.09224591431794342],
[37.68051454137488,0.08141365757694949],
[36.951460349670256,0.0728831821017795],
[36.3340264041647,0.06567884374547887],
[35.85411710838819,0.060719984549063216],
[35.39681624785624,0.056702437224211505],
[34.99675673210708,0.052807313424569575],
[34.61713592991402,0.04969558009394893],
[34.27577311455852,0.04703652417218244],
[33.976499607494866,0.04464485027171947],
[33.713463874291214,0.04272407955593533],
[33.47155750203893,0.040851133841055404],
[33.24402661515936,0.039335745352285865],
[33.02745826537622,0.037802731549298314],
[32.81939697112073,0.036369253087926795],
[32.602220727928874,0.03506402616147642],
[32.35241944321839,0.03354443444146051],
[32.07138915105319,0.03204158500388817],
[31.518031244088913,0.02943261464436849],
[31.06508584956377,0.02675533294677734],
[30.614848216110712,0.024297749554669415],
[30.11538833131431,0.021602312723795574],
[29.58450719625044,0.019274287753634985],
[29.08346764860089,0.017219472814489295],
[28.534568952194032,0.015115278738516348],
[27.98117808194189,0.013141314188639319],
[27.437141638596447,0.011078057465729894],
[26.839802560911384,0.009351765667950665],
[26.298579877573996,0.00790285181116175],
[25.738868995733934,0.006509074458369503],
[25.182136934994407,0.005244608278627748],
[24.601205235648838,0.004034501534921152],
[23.931676125899042,0.0029942194620768228],
[23.266608140519125,0.002226476316098813],
[22.446597460875964,0.0015667809380425345],
[21.45223555976626,0.001046392652723524],
[19.927531971848435,0.0006894712094907407],
"""

压缩记录
[38,32.13334019200346,0.03150318287037037],
[39,32.213821679933254,0.032045717592592594],
[40,32.2893290949991,0.0322265625],
[41,32.4171486042211,0.033022280092592594],
[42,32.464253840447306,0.03356481481481482],
[43,32.54379925989054,0.03381799768518518],
[44,32.67005427551273,0.034613715277777776],
[45,32.72225060136359,0.03486689814814815],
[46,32.82967663582221,0.035554108796296294],
[47,32.88870578113896,0.035951967592592594],
[48,32.93911609664107,0.036313657407407406],
[49,33.05969581059335,0.03714554398148148],
[50,33.102500337279494,0.03736255787037037],
[51,33.145585664132796,0.037434895833333336],
[52,33.26365389027089,0.03833912037037037],
[53,33.32109184464088,0.03880931712962963],
[54,33.39102218305915,0.03927951388888889],
[55,33.46787664628754,0.03967737268518518],
[56,33.551326311063136,0.04040075231481482],
[57,33.63660747561786,0.040943287037037035],
[58,33.73150499502578,0.041811342592592594],
[59,33.7957748797736,0.042173032407407406],
[60,33.885636194066,0.04267939814814815],
[61,33.98991006011507,0.04365596064814815],
[62,34.068456016609126,0.044017650462962965],
[63,34.1733416051657,0.045102719907407406],
[64,34.264385914354555,0.045500578703703706],
[65,34.36563994474776,0.046440972222222224],
[66,34.474373267897256,0.047272858796296294],
[67,34.59484431191027,0.048032407407407406],
[68,34.709356250545184,0.049153645833333336],
[69,34.81488376638897,0.05002170138888889],
[70,34.95372805782444,0.05125144675925926],
[71,35.09331039829277,0.052155671296296294],
[72,35.20436074827652,0.053059895833333336],
[73,35.32346413427559,0.05432581018518518],
[74,35.49956772646538,0.05617042824074074],
[75,35.58243565602393,0.056568287037037035],
[76,35.768284812605614,0.057942708333333336],
[77,35.96452848639108,0.060149016203703706],
[78,36.099683043334515,0.06188512731481482],
[79,36.25195381550208,0.06315104166666667],
[80,36.45544837789103,0.06499565972222222],
[81,36.673845781228174,0.0673828125],
[82,36.86924582528172,0.06929976851851852],
[83,37.08244072671589,0.07222945601851852],
[84,37.30882040053715,0.07458043981481481],
[85,37.55572709308563,0.0769314236111111],
[86,37.825086447533515,0.08069299768518519],
[87,38.07975454945025,0.08336950231481481],
[88,38.40980252700853,0.08792679398148148],
[89,38.71294439088759,0.0913990162037037],
[90,39.08966929002087,0.09729456018518519],
[91,39.46634807599993,0.10243055555555555],
[92,39.86642125795793,0.10774739583333333],
[93,40.34348241580567,0.1167896412037037],
[94,40.87881561293175,0.1279296875],
[95,41.43906071822335,0.1408420138888889],


[0.1,21.462611578856198,0.0008318865740740741],
[0.12000000000000001,21.905305935097584,0.0008680555555555555],
[0.14,22.272958157986725,0.0009403935185185185],
[0.16,22.63851890891044,0.0012297453703703704],
[0.18,22.96258449523584,0.0016276041666666667],
[0.19999999999999998,23.278785384556315,0.001808449074074074],
[0.21999999999999997,23.550486228435975,0.002097800925925926],
[0.23999999999999996,23.832018839277,0.002387152777777778],
[0.25999999999999995,24.118823622548245,0.0028935185185185184],
[0.27999999999999997,24.353787655281096,0.0031105324074074073],
[0.3,24.617995251891973,0.003616898148148148],
[0.32,24.843482227072823,0.004087094907407407],
[0.34,25.0853108841375,0.004484953703703704],
[0.36000000000000004,25.301460405131994,0.005027488425925926],
[0.38000000000000006,25.548032773633608,0.005570023148148148],
[0.4000000000000001,25.760766374996667,0.006040219907407407],
[0.4200000000000001,25.997137056477836,0.006582754629629629],
[0.4400000000000001,26.240106824948757,0.007125289351851852],
[0.46000000000000013,26.44683264390443,0.00784866898148148],
[0.48000000000000015,26.666461828481264,0.008355034722222222],
[0.5000000000000001,26.880403709513317,0.008897569444444444],
[0.5200000000000001,27.115526287898785,0.009693287037037037],
[0.5400000000000001,27.334407559228595,0.010380497685185185],
[0.5600000000000002,27.549563042393046,0.011103877314814815],
[0.5800000000000002,27.77109869121041,0.011827256944444444],
[0.6000000000000002,28.0116606310977,0.0126953125],
[0.6200000000000002,28.236319388958226,0.013491030092592593],
[0.6400000000000002,28.434636108380943,0.014178240740740741],
[0.6600000000000003,28.671287717867283,0.014937789351851851],
[0.6800000000000003,28.913534631331604,0.015986689814814815],
[0.7000000000000003,29.121286163974176,0.016746238425925927],
[0.7200000000000003,29.29188966897233,0.01739728009259259],
[0.7400000000000003,29.54566662422212,0.018590856481481483],
[0.7600000000000003,29.76390449644312,0.01953125],
[0.7800000000000004,29.955498012193488,0.02025462962962963],
[0.8000000000000004,30.160429364281928,0.021122685185185185],
[0.8200000000000004,30.36799985103238,0.022243923611111112],
[0.8400000000000004,30.55466174095757,0.023220486111111112],
[0.8600000000000004,30.728036494236765,0.024197048611111112],
[0.8800000000000004,30.970062342079032,0.025426793981481483],
[0.9000000000000005,31.11751389308834,0.026331018518518517],
[0.9200000000000005,31.29537424288375,0.027379918981481483],
[0.9400000000000005,31.47929246796635,0.02813946759259259],
[0.9600000000000005,31.6511939086717,0.02955005787037037],
[0.9800000000000005,31.823688038455174,0.030562789351851853],


PIL编码器下psnr与图片压缩率的关系:
[0.1,21.462611578856198,0.0010467811867042826],
[0.12000000000000001,21.905305935097584,0.0012201379846643518],
[0.14,22.272958157986725,0.0014325601083260999],
[0.16,22.63851890891044,0.00169407879864728],
[0.18,22.96258449523584,0.001958599797001591],
[0.19999999999999998,23.278785384556315,0.0022248868589048033],
[0.21999999999999997,23.550486228435975,0.0024872885810004334],
[0.23999999999999996,23.832018839277,0.002893200627079716],
[0.25999999999999995,24.118823622548245,0.0032732575028030972],
[0.27999999999999997,24.353787655281096,0.0036069375497323496],
[0.3,24.617995251891973,0.004033265290436921],
[0.32,24.843482227072823,0.004532142921730323],
[0.34,25.0853108841375,0.004949816951045284],
[0.36000000000000004,25.301460405131994,0.005432870652940539],
[0.38000000000000006,25.548032773633608,0.006030259308991607],
[0.4000000000000001,25.760766374996667,0.00650787353515625],
[0.4200000000000001,25.997137056477836,0.007043944464789496],
[0.4400000000000001,26.240106824948757,0.007530035795988859],
[0.46000000000000013,26.44683264390443,0.008272206341778792],
[0.48000000000000015,26.666461828481264,0.00880414468270761],
[0.5000000000000001,26.880403709513317,0.009347385830349391],
[0.5200000000000001,27.115526287898785,0.010178106802481192],
[0.5400000000000001,27.334407559228595,0.010831514994303385],
[0.5600000000000002,27.549563042393046,0.011502371893988714],
[0.5800000000000002,27.77109869121041,0.012243129588939528],
[0.6000000000000002,28.0116606310977,0.013131282947681566],
[0.6200000000000002,28.236319388958226,0.013902487578215423],
[0.6400000000000002,28.434636108380943,0.014620145161946617],
[0.6600000000000003,28.671287717867283,0.015298666777434175],
[0.6800000000000003,28.913534631331604,0.016368654039171007],
[0.7000000000000003,29.121286163974176,0.017199975472909437],
[0.7200000000000003,29.29188966897233,0.017863344263147424],
[0.7400000000000003,29.54566662422212,0.01899175290708189],
[0.7600000000000003,29.76390449644312,0.019979265001085073],
[0.7800000000000004,29.955498012193488,0.02070522308349609],
[0.8000000000000004,30.160429364281928,0.021577411227756072],
[0.8200000000000004,30.36799985103238,0.02280454282407407],
[0.8400000000000004,30.55466174095757,0.023707354510271995],
[0.8600000000000004,30.728036494236765,0.024611013906973383],
[0.8800000000000004,30.970062342079032,0.025733100043402776],
[0.9000000000000005,31.11751389308834,0.026716797440140338],
[0.9200000000000005,31.29537424288375,0.027798228793674048],
[0.9400000000000005,31.47929246796635,0.028648341143572773],
[0.9600000000000005,31.6511939086717,0.030054728190104168],
[0.9800000000000005,31.823688038455174,0.031012711701569745],
PIL编码器下psnr与图片压缩率的关系:
[38,31.278334283330306,0.03199202926070602],
[39,31.352178595956133,0.03245971820972584],
[40,31.422047307855873,0.03273215117277923],
[41,31.540593043890564,0.033510420057508684],
[42,31.583947475168213,0.033894927413375284],
[43,31.65851593090189,0.03431023491753472],
[44,31.772939857038864,0.03500546349419489],
[45,31.822081522446414,0.03538378962764034],
[46,31.92082716560344,0.03602865007188585],
[47,31.97667288266101,0.036326867562753176],
[48,32.024776113843295,0.03680476435908565],
[49,32.13141956985166,0.037560109738950374],
[50,32.17381570095742,0.037730040373625574],
[51,32.21640091484187,0.03789993568702981],
[52,32.321873072742626,0.03873221079508463],
[53,32.37701487593325,0.03928233959056713],
[54,32.44406783107916,0.03965692166928892],
[55,32.515361173758855,0.04015194928204573],
[56,32.59396166698679,0.040791264286747696],
[57,32.67316751732236,0.04144449587221499],
[58,32.760683223624746,0.04218903294316043],
[59,32.823155905749225,0.042632314893934466],
[60,32.90757794140709,0.043191062079535596],
[61,33.00391237559902,0.04402425554063585],
[62,33.0790483737736,0.044545632821542246],
[63,33.17758186490093,0.045462078518337674],
[64,33.26453827638925,0.046014079341182006],
[65,33.359623440056644,0.04693660029658564],
[66,33.463358709347816,0.04766647904007523],
[67,33.57595212830179,0.048423413877133954],
[68,33.68428159004571,0.04956171247694228],
[69,33.78528789982696,0.05039268069797092],
[70,33.916748090481704,0.05161490263762298],
[71,34.04812658177785,0.052665498521592885],
[72,34.155885098912165,0.05351373884412977],
[73,34.271300415685054,0.05478541056315106],
[74,34.43716258449051,0.0565659558331525],
[75,34.52213057457712,0.05698334729229964],
[76,34.699677663950936,0.058380480165834775],
[77,34.88595973796213,0.06052600012885198],
[78,35.022491022531796,0.062236891852484794],
[79,35.17311964802765,0.06355151423701534],
[80,35.369984720838254,0.0654267911557798],
[81,35.58343416715314,0.0678282137270327],
[82,35.77670265659405,0.06973750502974899],
[83,35.98877063905851,0.07262438314932365],
[84,36.21549298199297,0.0749675256234628],
[85,36.46154295541892,0.07735496097140841],
[86,36.73371948140453,0.08107902385570386],
[87,36.995837375738255,0.0837717056274414],
[88,37.33029301838298,0.08837240713614003],
[89,37.64560998389624,0.09185134039984809],
[90,38.03397334163549,0.09776345005741827],
[91,38.424044826210825,0.10288305635805485],
[92,38.8595760446924,0.10809538099500869],
[93,39.36265800374285,0.11724955947310835],
[94,39.944786352259044,0.1283399793836805],
[95,40.56040907935196,0.14132987128363714],
[96,41.34958712201956,0.15875318315294054],
[97,42.18381363624946,0.17852539486355254],
[98,43.17376045677063,0.2030204843591761],
[99,44.26775105974185,0.24835494712547015],
[100,44.859696691585974,0.28278096516927076],

数据执行代码:

# 计算PIL下图片平均压缩率和PSNR的关系
import os

from PIL import Image

from compressEvaluate import GetPSNR


def test2():
    i=38
    print("PIL编码器下psnr与图片压缩率的关系:")
    while i<=100:
        # 计算24张图片的平均PSNR
        avg_psnr=0.0
        avg_crate=0.0
        for index in range(1,25):
            path=f'src/Kodak-Lossless-True-Color-Image-Suite-master/PhotoCD_PCD0992/{index}.png'
            img = Image.open(path)
            rgbimg = img.convert('RGB')
            rgbimg.save("out/out.jpg", format="JPEG", quality=i)
            p=GetPSNR(path,"out/out.jpg")
            avg_psnr+=p
            crate=os.path.getsize("out/out.jpg")/(img.height*img.width*3)
            avg_crate+=crate
        avg_crate=avg_crate/24
        avg_psnr=avg_psnr/24
        print(f"[{i},{avg_psnr},{avg_crate}],")
        i+=1


def test3():
    ds = 0.1
    print("PIL编码器下psnr与图片压缩率的关系:")
    while ds <= 1.0:
        # 计算24张图片的平均PSNR
        avg_psnr = 0.0
        avg_crate = 0.0
        for index in range(1, 25):
            path = f'src/Kodak-Lossless-True-Color-Image-Suite-master/PhotoCD_PCD0992/{index}.png'
            img = Image.open(path)
            width, height = img.size
            n_w = int(width * ds)
            n_h = int(height * ds)
            if n_w < 8:
                n_w = 8
            if n_h < 8:
                n_h = 8
            new_size = (n_w, n_h)
            resized_img = img.resize(new_size, Image.LANCZOS)
            rgbimg = resized_img.convert('RGB')
            rgbimg.save("out/out.jpg", quality=38)
            p = GetPSNR(path, "out/out.jpg",reshape=True)
            avg_psnr += p
            crate = os.path.getsize("out/out.jpg") / (img.height * img.width * 3)
            avg_crate += crate
        avg_crate = avg_crate / 24
        avg_psnr = avg_psnr / 24
        print(f"[{ds},{avg_psnr},{avg_crate}],")
        ds += 0.02

test3()
test2()
(png数据)
j---------------------p-----------------g数据
PIL编码器下psnr与图片压缩率的关系(组合压缩):
[0.1,21.45223555976626,0.001046392652723524],
[0.12000000000000001,21.896361032142448,0.001220243948477286],
[0.14,22.263554008849013,0.0014325247870551217],
[0.16,22.627118648789708,0.0016956329345703123],
[0.18,22.95140517107609,0.0019585644757306136],
[0.19999999999999998,23.266608140519125,0.002226476316098813],
[0.21999999999999997,23.537220163902333,0.0024880303276909725],
[0.23999999999999996,23.816146907083013,0.0028935538397894967],
[0.25999999999999995,24.104025444683852,0.00327354007297092],
[0.27999999999999997,24.337975685329763,0.0036078912240487555],
[0.3,24.601205235648838,0.004034501534921152],
[0.32,24.825591116694866,0.0045364874380606195],
[0.34,25.067397489870313,0.004952077512387877],
[0.36000000000000004,25.282675066499568,0.0054364027800383385],
[0.38000000000000006,25.526862230296775,0.006028316639087819],
[0.4000000000000001,25.738868995733934,0.006509074458369503],
[0.4200000000000001,25.977072832340102,0.007048995406539352],
[0.4400000000000001,26.21811897926062,0.007537064728913481],
[0.46000000000000013,26.42345422276369,0.008274784794560187],
[0.48000000000000015,26.64120255894566,0.008805345605920861],
[0.5000000000000001,26.854415674566216,0.009355721650300202],
[0.5200000000000001,27.089111440108507,0.01018255728262442],
[0.5400000000000001,27.307494472689452,0.010834658587420429],
[0.5600000000000002,27.521660460035303,0.011511732030797887],
[0.5800000000000002,27.74122934841768,0.012250052558051215],
[0.6000000000000002,27.98117808194189,0.013141314188639319],
[0.6200000000000002,28.204089384898804,0.013911105968334054],
[0.6400000000000002,28.40159502316594,0.014636675516764326],
[0.6600000000000003,28.63687724186438,0.015312194824218748],
[0.6800000000000003,28.877266592080684,0.016383771543149597],
[0.7000000000000003,29.08346764860089,0.017219472814489295],
[0.7200000000000003,29.25246040830235,0.017874823676215276],
[0.7400000000000003,29.505058541603116,0.019013864022714117],
[0.7600000000000003,29.72239392928903,0.019996254532425494],
[0.7800000000000004,29.91186598175338,0.020726415846082903],
[0.8000000000000004,30.11538833131431,0.021602312723795574],
[0.8200000000000004,30.320571155839247,0.022825912193015774],
[0.8400000000000004,30.506516249985918,0.023736494558828845],
[0.8600000000000004,30.678760001669065,0.024641990661621094],
[0.8800000000000004,30.918813430445766,0.025760968526204426],
[0.9000000000000005,31.06508584956377,0.02675533294677734],
[0.9200000000000005,31.24136425609201,0.027830900969328706],
[0.9400000000000005,31.423270845184714,0.028680518821433732],
[0.9600000000000005,31.595778163317178,0.030098703172471788],
[0.9800000000000005,31.766506790553706,0.031064386721010567],
PIL编码器下psnr与图片压缩率的关系(JPEG编码压缩):
[38,31.209116707760742,0.03204158500388817],
[39,31.28165655664208,0.03250457622386791],
[40,31.35057462920743,0.032790925767686635],
[41,31.46793038752588,0.03354443444146051],
[42,31.511323044163092,0.033939644142433445],
[43,31.584073409814817,0.03437155264395254],
[44,31.69724670026865,0.03506402616147642],
[45,31.745701141491335,0.03544574313693576],
[46,31.84367768550671,0.036077146176938656],
[47,31.89931023244432,0.036369253087926795],
[48,31.94672551696229,0.03685771094428169],
[49,32.04949470687418,0.037640359666612416],
[50,32.090705796941215,0.037802731549298314],
[51,32.13257899698933,0.03798287003128617],
[52,32.23673083681743,0.03879684872097439],
[53,32.291381727902156,0.039335745352285865],
[54,32.35755380261848,0.03971876921477141],
[55,32.42772289276818,0.040226971661603016],
[56,32.505493023243076,0.040851133841055404],
[57,32.58360597084684,0.04152340359157986],
[58,32.669750872398396,0.04229390179669415],
[59,32.731578689438834,0.04272407955593533],
[60,32.81432717338464,0.043277881763599535],
[61,32.90559248266704,0.04410616556803385],
[62,32.97880610387803,0.04464485027171947],
[63,33.076177132000126,0.045566806086787474],
[64,33.166891077616135,0.046107398139105915],
[65,33.25978412726212,0.04703652417218244],
[66,33.36162779761862,0.04777184239140264],
[67,33.47515740514557,0.04852139508282696],
[68,33.58123774929975,0.04969558009394893],
[69,33.68180099811834,0.0505176826759621],
[70,33.810688248129864,0.051764664826569724],
[71,33.93966245607812,0.052807313424569575],
[72,34.04560505243761,0.05365587163854529],
[73,34.15728890688802,0.0549359851413303],
[74,34.32196229477528,0.056702437224211505],
[75,34.4046815749067,0.05713692417851201],
[76,34.57905761016438,0.05854101534242983],
[77,34.76214073404402,0.060719984549063216],
[78,34.89450475721697,0.06244443964075159],
[79,35.04316510002977,0.06375026702880861],
[80,35.234143451322716,0.06567884374547887],
[81,35.44626508206249,0.06803360691776983],
[82,35.63309643761948,0.06999895307752822],
[83,35.84150137530178,0.0728831821017795],
[84,36.061878450570795,0.07528209686279295],
[85,36.305951751794744,0.07760422318070023],
[86,36.569524962529194,0.08141365757694949],
[87,36.82528588959827,0.08415282214129412],
[88,37.15176973802341,0.0887337084169741],
[89,37.4592872371858,0.09224591431794342],
[90,37.83697025054155,0.09820104528356481],
[91,38.21550472058078,0.10340906072545936],
[92,38.63696444559841,0.10875306306061922],
[93,39.12449594077808,0.11787252072934751],
[94,39.69080067176042,0.1290576016461408],
[95,40.280886554662445,0.14235761430528426],
[96,41.05184299060827,0.15991366351092304],
[97,41.86241543736936,0.1797863289161965],
[98,42.82962083304761,0.20486457259566695],
[99,43.94476468606504,0.25103399488661027],
[100,44.624771968119184,0.2846458576343677],


moz-----------------------------------
MozJPEG编码器下psnr与图片压缩率的关系(组合压缩):
[0.1,21.24115265922345,0.0007941281353985823],
[0.12000000000000001,21.66008634016403,0.0009189181857638889],
[0.14,22.025793062145738,0.0010750735247576678],
[0.16,22.384419675122345,0.001262947365089699],
[0.18,22.687020973596706,0.0014508918479636862],
[0.19999999999999998,22.991828468626025,0.0016462891190140337],
[0.21999999999999997,23.243924897873672,0.0018238491482204862],
[0.23999999999999996,23.515333034035137,0.002117969371654369],
[0.25999999999999995,23.776184857185502,0.00238054770010489],
[0.27999999999999997,24.00907589352033,0.0026181538899739585],
[0.3,24.27129504332065,0.002928698504412616],
[0.32,24.456772393383293,0.0032589170667860247],
[0.34,24.668202977276334,0.00355141251175492],
[0.36000000000000004,24.88668305180998,0.0038837150291160306],
[0.38000000000000006,25.105502374468625,0.0042832692464192705],
[0.4000000000000001,25.256474134383296,0.004607483192726417],
[0.4200000000000001,25.494999474437407,0.004975954691569011],
[0.4400000000000001,25.732840005924672,0.005320301762333622],
[0.46000000000000013,25.890183357194974,0.005825537222403067],
[0.48000000000000015,26.05863607382579,0.006160665441442417],
[0.5000000000000001,26.284049941538196,0.006574842664930556],
[0.5200000000000001,26.491122549501767,0.007134755452473958],
[0.5400000000000001,26.645521873853923,0.007564368071379484],
[0.5600000000000002,26.8210120756092,0.008014643633807146],
[0.5800000000000002,27.059014864770116,0.00853301860668041],
[0.6000000000000002,27.258708251415683,0.009140120612250434],
[0.6200000000000002,27.43045096972632,0.009633982623064958],
[0.6400000000000002,27.62288429612792,0.010153487876609519],
[0.6600000000000003,27.876936322295474,0.010609520806206599],
[0.6800000000000003,28.012137604723804,0.011333394933629918],
[0.7000000000000003,28.19471414145907,0.011891682942708334],
[0.7200000000000003,28.42680968933843,0.012394198664912473],
[0.7400000000000003,28.643496469804774,0.013148307800292969],
[0.7600000000000003,28.780089118710745,0.01373739595766421],
[0.7800000000000004,28.988446262965223,0.014332206160933884],
[0.8000000000000004,29.215516236247506,0.014930795740198207],
[0.8200000000000004,29.371204979030612,0.015704614144784433],
[0.8400000000000004,29.498355833446325,0.016342127764666523],
[0.8600000000000004,29.734124053288898,0.016987447385434753],
[0.8800000000000004,29.965193402998683,0.017697263647008826],
[0.9000000000000005,30.06589731114961,0.018410435429325814],
[0.9200000000000005,30.242040889726056,0.019172138637966577],
[0.9400000000000005,30.464279063021888,0.01976225111219618],
[0.9600000000000005,30.59759183620777,0.02074248702437789],
[0.9800000000000005,30.741222480122403,0.021282372651276762],
MozJPEG编码器下psnr与图片压缩率的关系(JPEG编码压缩):
[38,30.30855571541214,0.022126621670193147],
[39,30.384155396872657,0.022639380560980905],
[40,30.449758044919403,0.02294512148256655],
[41,30.581175947091186,0.023671680026584197],
[42,30.631116420805828,0.023944890057599102],
[43,30.71057550119167,0.024271364565248837],
[44,30.809692858744626,0.024967334888599535],
[45,30.858845144110457,0.025179615727177373],
[46,30.986093889102246,0.02599896325005425],
[47,31.031533454489022,0.02618620130750868],
[48,31.08714983851983,0.026415895532678677],
[49,31.175721325263698,0.027140122872811784],
[50,31.23679703795118,0.02739411813241464],
[51,31.293989149224473,0.02761819627549914],
[52,31.38201416673712,0.028455840216742617],
[53,31.436389731796908,0.028666496276855465],
[54,31.498644292257826,0.028985623960141777],
[55,31.601049271100635,0.02986070844862197],
[56,31.66595731844194,0.030143843756781686],
[57,31.748257184420662,0.03061513547544126],
[58,31.841702349237867,0.03142575864438658],
[59,31.92675611145516,0.03186289469401042],
[60,31.999310477722712,0.032299642209653506],
[61,32.10724212425341,0.033194400646068434],
[62,32.19051646371796,0.033644534923412184],
[63,32.2675032858411,0.03408220079210069],
[64,32.37074883541995,0.034789968419958045],
[65,32.481184373999824,0.0356141549569589],
[66,32.596777605765034,0.03636561499701605],
[67,32.693879548087416,0.03697261103877315],
[68,32.80464782604683,0.0380128577903465],
[69,32.91408567981615,0.03876290497956453],
[70,33.03832417824577,0.03939646261709708],
[71,33.17115668133895,0.04078865051269531],
[72,33.30326696023598,0.041671223110622824],
[73,33.406845642326694,0.04215353506582754],
[74,33.61083828822026,0.04424247035273799],
[75,33.69152058493004,0.04459691930700232],
[76,33.85841240022649,0.04571374257405599],
[77,34.040770063496424,0.04804996207908347],
[78,34.18272137821041,0.04891169512713398],
[79,34.3431499018034,0.05012604042335792],
[80,34.81306813552827,0.05733588889793113],
[81,34.99991621114776,0.058705930356626156],
[82,35.20960483392219,0.0608400062278465],
[83,35.407805708320225,0.0635130140516493],
[84,35.64333732303095,0.06575273584436488],
[85,35.89010509774439,0.06818449938738788],
[86,36.16153696510382,0.07204518494782623],
[87,36.446162150288316,0.07512223279034651],
[88,36.75905452680823,0.0785448639481156],
[89,37.074071455178185,0.08159669240315755],
[90,37.89527274559156,0.10311999144377533],
[91,38.31857263249272,0.10802035861545138],
[92,38.83207287602915,0.11559730105929905],
[93,39.40930843239411,0.12763351864284941],
[94,40.12010790399217,0.1405638235586661],
[95,40.851698660916114,0.14984378108271848],
[96,41.99810419965325,0.18440320756700304],
[97,43.301386820897484,0.20702164261429404],
[98,45.159025565766086,0.24677506199589486],
[99,48.26443120454473,0.30612931428132234],
[100,57.39114903125758,0.37357461010968246],

#并发请求测试代码
import grequests


import requests
from concurrent.futures import ThreadPoolExecutor

def send_request(url, params=None):
    try:
        response = requests.get(url, params=params)
        return response.json()
    except Exception as e:
        return {"error": str(e)}

# 要发送的请求列表
url = "http://47.104.6.104:5000/reqtest"
requests_data = [
    {"index": "1", },
    {"index": "2", },
    {"index": "3", },
    {"index": "4", },
    {"index": "5", },
    {"index": "6", },
    {"index": "7", },
    # 更多请求...
]

# 并行发送请求
with ThreadPoolExecutor(max_workers=5) as executor:  # 控制并发数
    results = list(executor.map(
        lambda data: send_request(url, params=data),
        requests_data
    ))


sorted_by_age = sorted(results, key=lambda x: x['start'])
for result in sorted_by_age:
    print(result['index'],",",result['start'],",",result['end'])


 ---moz reshape模式下数据:
 [38,31.10689044267617,0.022126621670193147],
[39,31.191784004329666,0.022639380560980905],
[40,31.263929427098365,0.02294512148256655],
[41,31.411733021052385,0.023671680026584197],
[42,31.46695635676851,0.023944890057599102],
[43,31.55359325721785,0.024271364565248837],
[44,31.66448978123619,0.024967334888599535],
[45,31.718759100565496,0.025179615727177373],
[46,31.862385010152533,0.02599896325005425],
[47,31.910577187058575,0.02618620130750868],
[48,31.97045749286018,0.026415895532678677],
[49,32.07296605597947,0.027140122872811784],
[50,32.13959469463595,0.02739411813241464],
[51,32.20154440703216,0.02761819627549914],
[52,32.301853849712735,0.028455840216742617],
[53,32.35989699482533,0.028666496276855465],
[54,32.42736369919293,0.028985623960141777],
[55,32.54287406211826,0.02986070844862197],
[56,32.61318219918513,0.030143843756781686],
[57,32.70204654395321,0.03061513547544126],
[58,32.80694224642305,0.03142575864438658],
[59,32.9011976222234,0.03186289469401042],
[60,32.97963201153478,0.032299642209653506],
[61,33.10089447324375,0.033194400646068434],
[62,33.19153641920728,0.033644534923412184],
[63,33.274284895626714,0.03408220079210069],
[64,33.38988728544398,0.034789968419958045],
[65,33.513531052449764,0.0356141549569589],
[66,33.64009559335049,0.03636561499701605],
[67,33.745331951698915,0.03697261103877315],
[68,33.8676284081596,0.0380128577903465],
[69,33.98708568021079,0.03876290497956453],
[70,34.119103314412804,0.03939646261709708],
[71,34.266254964118474,0.04078865051269531],
[72,34.41208704778944,0.041671223110622824],
[73,34.51761054276342,0.04215353506582754],
[74,34.75073418077046,0.04424247035273799],
[75,34.8333039901314,0.04459691930700232],
[76,35.01262129324991,0.04571374257405599],
[77,35.216137489411345,0.04804996207908347],
[78,35.36264750835228,0.04891169512713398],
[79,35.53776917348239,0.05012604042335792],
[80,36.1164578610447,0.05733588889793113],
[81,36.31817329884111,0.058705930356626156],
[82,36.54907797996967,0.0608400062278465],
[83,36.76578404170638,0.0635130140516493],
[84,37.01907227267478,0.06575273584436488],
[85,37.287863230513615,0.06818449938738788],
[86,37.579977152042964,0.07204518494782623],
[87,37.889546052787026,0.07512223279034651],
[88,38.21706571330599,0.0785448639481156],
[89,38.54903602113168,0.08159669240315755],
[90,39.56519760711155,0.10311999144377533],
[91,40.012069903455604,0.10802035861545138],
[92,40.57329487858575,0.11559730105929905],
[93,41.18691380219285,0.12763351864284941],
[94,41.94842811332472,0.1405638235586661],
[95,42.6994813624379,0.14984378108271848],
[96,43.90507739483392,0.18440320756700304],
[97,45.18126602861185,0.20702164261429404],
[98,46.96092923492943,0.24677506199589486],
[99,49.616081972970996,0.30612931428132234],
[100,56.59033402582377,0.37357461010968246],


图片文件总大小: 104.857421875
图片文件总大小: 2409.0234375
23.206690733892586 , 1.6948222983943713
27.011844366174053 , 0.2290983785673703
14.378606670393424 , 7.760416666666667
13.786461625679344 , 8.416666666666666
15.038774121418193 , 10.638344226579521
16.495984938463963 , 8.016666666666667
15.414267073036516 , 9.564583333333333
11.072313522259625 , 5.567708333333333
18.504124615487843 , 6.9375
14.38167036118056 , 8.447916666666666
17.331743749049405 , 6.432291666666667
22.85396993682316 , 1.1171997157071785
24.984984718955626 , 0.5886649480509335
26.053813833134683 , 0.36109310216530655
28.698716184751465 , 0.3165929908403027
27.606990354613142 , 0.35795192575951135
26.86869123066941 , 0.619085884043149
31.8301587911788 , 0.09016167848639238
25.694395160574494 , 0.9580391239965708
25.90917473377827 , 0.3883468516123976
27.99357987404035 , 0.3388454314177703
文件平均PSNR: 21.672236028359755


文件分析psnr
import os
import shutil
from math import inf

import fitz
from PIL import Image
from PIL.Image import open as imgopen

from compressEvaluate import GetPSNR


def clear_folder(folder_path):
    """
    清空指定文件夹下的所有文件和子文件夹
    :param folder_path: 文件夹路径
    """
    # 检查文件夹是否存在
    if not os.path.exists(folder_path):
        print(f"文件夹 {folder_path} 不存在")
        return

    # 遍历文件夹中的所有内容
    for filename in os.listdir(folder_path):
        file_path = os.path.join(folder_path, filename)  # 获取文件或文件夹的完整路径

        try:
            # 如果是文件，则删除
            if os.path.isfile(file_path) or os.path.islink(file_path):
                os.unlink(file_path)  # 删除文件或符号链接
                print(f"已删除文件: {file_path}")
            # 如果是文件夹，则递归删除
            elif os.path.isdir(file_path):
                shutil.rmtree(file_path)  # 删除文件夹及其内容
                print(f"已删除文件夹: {file_path}")
        except Exception as e:
            print(f"删除 {file_path} 时出错: {e}")
# 测试压缩后的文件与原文件对比的图像PSNR
# 逐步解析pdf文件,并且反馈进度信息(主要是读取图片大小和占比)
def parse_pdf_file(filepath,outpath):
    filename = filepath
    # 获取文件总大小
    filesize = os.path.getsize(filename) / 1024
    # 解析文件
    doc = fitz.open(filename)
    # doc = fitz.open('./paper/test.pdf')
    # 获取图片文件大小
    pix_size = 0
    img_size = 0
    page_number = doc.page_count
    now_page = 0
    count=0
    img_list=[]
    for page in doc.pages():
        imageList = page.get_images()

        for imginfo in imageList:
            xref = imginfo[0]  # 获取图像的 xref
            image_info = doc.extract_image(xref)

            # 保存图像到文件
            new_name = f"{outpath}/image_{count}.{image_info['ext']}"
            with open(new_name, "wb") as img_file:
                img_file.write(image_info["image"])
            img = imgopen(new_name)
            pix_size += img.height * img.width * 3 // 1024
            img_size += os.path.getsize(new_name) / 1024
            page.delete_image(xref)
            img.close()
            if os.path.getsize(new_name)<100:
                os.remove(new_name)
            else:
                img_list.append(new_name)
                count += 1

        now_page += 1
    doc.close()
    print("图片文件总大小:",img_size)
    return img_list

def parse_pdf_file_repalce(filepath,outpath):
    file_paths = []
    # 遍历文件夹
    for item in os.listdir(outpath):
        # 拼接完整路径
        full_path = os.path.join(outpath, item)
        # 判断是否是文件（不是文件夹）
        if os.path.isfile(full_path):
            file_paths.append(full_path)
    return file_paths


def GetPdfQualLoss():
    clear_folder("./src/temp")
    clear_folder("./src/temp2")
    ls1=parse_pdf_file("src/imageData/bf272889-707c-4d41-a707-34a962df4561.pdf", "src/temp")
    ls2=parse_pdf_file("src/IJCV-xianzhu.pdf", "src/temp2")
    i=0
    sum=0.0
    count=0
    while i<len(ls2):
        img = Image.open(ls1[i])
        actsize=img.height*img.width*3
        cr=os.path.getsize(ls2[i])
        psnr=GetPSNR(ls1[i],ls2[i],reshape=True)
        print(psnr,",",cr/actsize)
        if psnr<60:
            sum+=psnr
            count+=1
        i+=1
    print('文件平均PSNR:',sum/count)


GetPdfQualLoss()

# 改为固定压缩率压缩
0.02-----
0.3566666666666662,94,27.164112433307963
0.41333333333333283,90,27.84639732158162
0.4616666666666663,86,28.382331770789865
0.500833333333333,82,28.721723682581114
0.5333333333333329,78,28.940431716129737
0.5649999999999996,74,29.159242599554574
0.5941666666666664,70,29.323451608273583
0.6224999999999996,66,29.459919437929585
0.6449999999999996,62,29.527232177069035
0.6674999999999996,58,29.60879332377995
0.6908333333333331,54,29.684411195442305
0.7099999999999996,50,29.71343737886865
0.7291666666666664,46,29.737095466596273
0.7583333333333332,42,29.77974784692127
0.7799999999999999,38,29.755075579277676
0.818333333333333,34,29.80528511315735
0.8516666666666665,30,29.750887754412805
0.8808333333333329,26,29.573119414499946
0.9108333333333332,22,29.310621565331342
0.9383333333333331,18,28.871876692122623
0.9666666666666662,14,28.150956036499213
0.9866666666666664,10,27.01585959298318
0.9899999999999997,6,24.95772280709923
0.9899999999999997,2,21.621915738784512
0.01
0.23749999999999938,94,25.21068191429013
0.27583333333333276,90,25.668934875986896
0.30916666666666615,86,26.031531523663702
0.33166666666666605,82,26.199884358095066
0.3549999999999995,78,26.383410207639525
0.37666666666666604,74,26.52522640891307
0.39749999999999946,70,26.636852225346686
0.4133333333333327,66,26.71654954091949
0.43249999999999966,62,26.827260807972163
0.44499999999999956,58,26.85986811240983
0.46499999999999964,54,26.99158153541262
0.47583333333333283,50,26.999846248276256
0.4866666666666661,46,27.010340188933288
0.505833333333333,42,27.060361525736838
0.5224999999999994,38,27.09758951696273
0.5474999999999998,34,27.15021029786972
0.570833333333333,30,27.151681154507468
0.6016666666666662,26,27.145312264031446
0.6383333333333329,22,27.11621626443893
0.6899999999999998,18,27.03802624746838
0.7541666666666664,14,26.757920269503344
0.8483333333333332,10,26.23161668995201
0.9491666666666664,6,24.75809656324874
0.9891666666666663,2,21.61931165882328
0.015
0.30166666666666603,94,26.261726136354223
0.3516666666666662,90,26.876200552194863
0.38916666666666605,86,27.23832310680101
0.4249999999999996,82,27.57895564792841
0.45333333333333287,78,27.787743797443913
0.4774999999999994,74,27.937240307603773
0.5016666666666664,70,28.069595201142263
0.5266666666666662,66,28.20399183310654
0.5474999999999997,62,28.30004487908202
0.5649999999999996,58,28.353595450386802
0.5858333333333329,54,28.438158807248865
0.600833333333333,50,28.46953052671613
0.6183333333333328,46,28.527858433408756
0.6408333333333328,42,28.558559022193734
0.6599999999999998,38,28.574781928180702
0.693333333333333,34,28.646888936793314
0.7216666666666662,30,28.61614203084848
0.7633333333333333,26,28.58612071175379
0.8099999999999997,22,28.4894180581441
0.8624999999999997,18,28.296823683022254
0.9125,14,27.77634190088106
0.960833333333333,10,26.850395862331098
0.988333333333333,6,24.948227221600934
0.9899999999999997,2,21.621915738784512


data = np.array([
    [38, 31.209116707760742, 0.03204158500388817],
    [39, 31.28165655664208, 0.03250457622386791],
    [40, 31.35057462920743, 0.032790925767686635],
    [41, 31.46793038752588, 0.03354443444146051],
    [42, 31.511323044163092, 0.033939644142433445],
    [43, 31.584073409814817, 0.03437155264395254],
    [44, 31.69724670026865, 0.03506402616147642],
    [45, 31.745701141491335, 0.03544574313693576],
    [46, 31.84367768550671, 0.036077146176938656],
    [47, 31.89931023244432, 0.036369253087926795],
    [48, 31.94672551696229, 0.03685771094428169],
    [49, 32.04949470687418, 0.037640359666612416],
    [50, 32.090705796941215, 0.037802731549298314],
    [51, 32.13257899698933, 0.03798287003128617],
    [52, 32.23673083681743, 0.03879684872097439],
    [53, 32.291381727902156, 0.039335745352285865],
    [54, 32.35755380261848, 0.03971876921477141],
    [55, 32.42772289276818, 0.040226971661603016],
    [56, 32.505493023243076, 0.040851133841055404],
    [57, 32.58360597084684, 0.04152340359157986],
    [58, 32.669750872398396, 0.04229390179669415],
    [59, 32.731578689438834, 0.04272407955593533],
    [60, 32.81432717338464, 0.043277881763599535],
    [61, 32.90559248266704, 0.04410616556803385],
    [62, 32.97880610387803, 0.04464485027171947],
    [63, 33.076177132000126, 0.045566806086787474],
    [64, 33.166891077616135, 0.046107398139105915],
    [65, 33.25978412726212, 0.04703652417218244],
    [66, 33.36162779761862, 0.04777184239140264],
    [67, 33.47515740514557, 0.04852139508282696],
    [68, 33.58123774929975, 0.04969558009394893],
    [69, 33.68180099811834, 0.0505176826759621],
    [70, 33.810688248129864, 0.051764664826569724],
    [71, 33.93966245607812, 0.052807313424569575],
    [72, 34.04560505243761, 0.05365587163854529],
    [73, 34.15728890688802, 0.0549359851413303],
    [74, 34.32196229477528, 0.056702437224211505],
    [75, 34.4046815749067, 0.05713692417851201],
    [76, 34.57905761016438, 0.05854101534242983],
    [77, 34.76214073404402, 0.060719984549063216],
    [78, 34.89450475721697, 0.06244443964075159],
    [79, 35.04316510002977, 0.06375026702880861],
    [80, 35.234143451322716, 0.06567884374547887],
    [81, 35.44626508206249, 0.06803360691776983],
    [82, 35.63309643761948, 0.06999895307752822],
    [83, 35.84150137530178, 0.0728831821017795],
    [84, 36.061878450570795, 0.07528209686279295],
    [85, 36.305951751794744, 0.07760422318070023],
    [86, 36.569524962529194, 0.08141365757694949],
    [87, 36.82528588959827, 0.08415282214129412],
    [88, 37.15176973802341, 0.0887337084169741],
    [89, 37.4592872371858, 0.09224591431794342],
    [90, 37.83697025054155, 0.09820104528356481],
    [91, 38.21550472058078, 0.10340906072545936],
    [92, 38.63696444559841, 0.10875306306061922],
    [93, 39.12449594077808, 0.11787252072934751],
    [94, 39.69080067176042, 0.1290576016461408],
    [95, 40.280886554662445, 0.14235761430528426],
    [96, 41.05184299060827, 0.15991366351092304],
    [97, 41.86241543736936, 0.1797863289161965],
    [98, 42.82962083304761, 0.20486457259566695],
    [99, 43.94476468606504, 0.25103399488661027],
    [100, 44.624771968119184, 0.2846458576343677],
])

mozdata = np.array([
    [38, 30.30855571541214, 0.022126621670193147],
    [39, 30.384155396872657, 0.022639380560980905],
    [40, 30.449758044919403, 0.02294512148256655],
    [41, 30.581175947091186, 0.023671680026584197],
    [42, 30.631116420805828, 0.023944890057599102],
    [43, 30.71057550119167, 0.024271364565248837],
    [44, 30.809692858744626, 0.024967334888599535],
    [45, 30.858845144110457, 0.025179615727177373],
    [46, 30.986093889102246, 0.02599896325005425],
    [47, 31.031533454489022, 0.02618620130750868],
    [48, 31.08714983851983, 0.026415895532678677],
    [49, 31.175721325263698, 0.027140122872811784],
    [50, 31.23679703795118, 0.02739411813241464],
    [51, 31.293989149224473, 0.02761819627549914],
    [52, 31.38201416673712, 0.028455840216742617],
    [53, 31.436389731796908, 0.028666496276855465],
    [54, 31.498644292257826, 0.028985623960141777],
    [55, 31.601049271100635, 0.02986070844862197],
    [56, 31.66595731844194, 0.030143843756781686],
    [57, 31.748257184420662, 0.03061513547544126],
    [58, 31.841702349237867, 0.03142575864438658],
    [59, 31.92675611145516, 0.03186289469401042],
    [60, 31.999310477722712, 0.032299642209653506],
    [61, 32.10724212425341, 0.033194400646068434],
    [62, 32.19051646371796, 0.033644534923412184],
    [63, 32.2675032858411, 0.03408220079210069],
    [64, 32.37074883541995, 0.034789968419958045],
    [65, 32.481184373999824, 0.0356141549569589],
    [66, 32.596777605765034, 0.03636561499701605],
    [67, 32.693879548087416, 0.03697261103877315],
    [68, 32.80464782604683, 0.0380128577903465],
    [69, 32.91408567981615, 0.03876290497956453],
    [70, 33.03832417824577, 0.03939646261709708],
    [71, 33.17115668133895, 0.04078865051269531],
    [72, 33.30326696023598, 0.041671223110622824],
    [73, 33.406845642326694, 0.04215353506582754],
    [74, 33.61083828822026, 0.04424247035273799],
    [75, 33.69152058493004, 0.04459691930700232],
    [76, 33.85841240022649, 0.04571374257405599],
    [77, 34.040770063496424, 0.04804996207908347],
    [78, 34.18272137821041, 0.04891169512713398],
    [79, 34.3431499018034, 0.05012604042335792],
    [80, 34.81306813552827, 0.05733588889793113],
    [81, 34.99991621114776, 0.058705930356626156],
    [82, 35.20960483392219, 0.0608400062278465],
    [83, 35.407805708320225, 0.0635130140516493],
    [84, 35.64333732303095, 0.06575273584436488],
    [85, 35.89010509774439, 0.06818449938738788],
    [86, 36.16153696510382, 0.07204518494782623],
    [87, 36.446162150288316, 0.07512223279034651],
    [88, 36.75905452680823, 0.0785448639481156],
    [89, 37.074071455178185, 0.08159669240315755],
    [90, 37.89527274559156, 0.10311999144377533],
    [91, 38.31857263249272, 0.10802035861545138],
    [92, 38.83207287602915, 0.11559730105929905],
    [93, 39.40930843239411, 0.12763351864284941],
    [94, 40.12010790399217, 0.1405638235586661],
    [95, 40.851698660916114, 0.14984378108271848],
    [96, 41.99810419965325, 0.18440320756700304],
    [97, 43.301386820897484, 0.20702164261429404],
    [98, 45.159025565766086, 0.24677506199589486],
    [99, 48.26443120454473, 0.30612931428132234],
    [100, 57.39114903125758, 0.37357461010968246],
])

# 提取自变量和因变量
x = data[:, 1]  # 第一列是自变量
y1 = data[:, 2]  # 第二列是因变量 y1
# y3 = data2[:, 1]  # 第三列是因变量 y2
x2 = mozdata[:, 1]  # 第一列是自变量
y2 = mozdata[:, 2]  # 第四列是因变量 y3

# 生成平滑曲线的插值点
x_smooth = np.linspace(min(x), max(x), 300)  # 生成更密集的 x 值用于平滑曲线

# 对每条曲线进行样条插值
spline1 = make_interp_spline(x, y1, k=3)  # k=3 表示三次样条
y1_smooth = spline1(x_smooth)

x2_smooth = np.linspace(min(x2), max(x2), 300)  # 生成更密集的 x 值用于平滑曲线
spline2 = make_interp_spline(x2, y2, k=3)
y2_smooth = spline2(x2_smooth)
#
# spline3 = make_interp_spline(x, y3, k=3)
# y3_smooth = spline3(x_smooth)

# 绘制原始数据和平滑曲线
plt.scatter(x, y1, label='PIL编码器', color='blue')
plt.plot(x_smooth, y1_smooth, label='', color='blue', linestyle='-')

# 绘制原始数据和平滑曲线
plt.scatter(x2, y2, label='moz编码器', color='red')
plt.plot(x2_smooth, y2_smooth, label='', color='red', linestyle='-')

# 绘制单个的点
# plt.plot(20,30,'ro')
# plt.plot(25,35,'ro')

# plt.scatter(x, y2, label='图片2压缩率', color='green')
# plt.plot(x_smooth, y2_smooth, label='图片2插值曲线', color='green', linestyle='-')

# plt.scatter(x, y3, label='ssim', color='red')
# plt.plot(x_smooth, y3_smooth, label='SSIM插值曲线', color='red', linestyle='-')

plt.ylabel('压缩率')
plt.xlabel('PSNR')
plt.legend()
plt.title('JPEG编码压缩方式下PSNR与压缩率的关系')
plt.grid(True)
plt.show()



