import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import make_interp_spline

plt.rcParams['font.sans-serif'] = ['SimHei']  # 设置字体为黑体
plt.rcParams['axes.unicode_minus'] = False  # 解决负号显示问题
# 假设数据存储在一个二维数组中，每行格式为：[x, y1, y2, y3]
d15 = [
    [0.30166666666666603, 94, 26.261726136354223],
    [0.3516666666666662, 90, 26.876200552194863],
    [0.38916666666666605, 86, 27.23832310680101],
    [0.4249999999999996, 82, 27.57895564792841],
    [0.45333333333333287, 78, 27.787743797443913],
    [0.4774999999999994, 74, 27.937240307603773],
    [0.5016666666666664, 70, 28.069595201142263],
    [0.5266666666666662, 66, 28.20399183310654],
    [0.5474999999999997, 62, 28.30004487908202],
    [0.5649999999999996, 58, 28.353595450386802],
    [0.5858333333333329, 54, 28.438158807248865],
    [0.600833333333333, 50, 28.46953052671613],
    [0.6183333333333328, 46, 28.527858433408756],
    [0.6408333333333328, 42, 28.558559022193734],
    [0.6599999999999998, 38, 28.574781928180702],
    [0.693333333333333, 34, 28.646888936793314],
    [0.7216666666666662, 30, 28.61614203084848],
    [0.7633333333333333, 26, 28.58612071175379],
    [0.8099999999999997, 22, 28.4894180581441],
    [0.8624999999999997, 18, 28.296823683022254],
    [0.9125, 14, 27.77634190088106],
    [0.960833333333333, 10, 26.850395862331098],
    [0.988333333333333, 6, 24.948227221600934],
    [0.9899999999999997, 2, 21.621915738784512],
]
d10 = [
    [0.23749999999999938, 94, 25.21068191429013],
    [0.27583333333333276, 90, 25.668934875986896],
    [0.30916666666666615, 86, 26.031531523663702],
    [0.33166666666666605, 82, 26.199884358095066],
    [0.3549999999999995, 78, 26.383410207639525],
    [0.37666666666666604, 74, 26.52522640891307],
    [0.39749999999999946, 70, 26.636852225346686],
    [0.4133333333333327, 66, 26.71654954091949],
    [0.43249999999999966, 62, 26.827260807972163],
    [0.44499999999999956, 58, 26.85986811240983],
    [0.46499999999999964, 54, 26.99158153541262],
    [0.47583333333333283, 50, 26.999846248276256],
    [0.4866666666666661, 46, 27.010340188933288],
    [0.505833333333333, 42, 27.060361525736838],
    [0.5224999999999994, 38, 27.09758951696273],
    [0.5474999999999998, 34, 27.15021029786972],
    [0.570833333333333, 30, 27.151681154507468],
    [0.6016666666666662, 26, 27.145312264031446],
    [0.6383333333333329, 22, 27.11621626443893],
    [0.6899999999999998, 18, 27.03802624746838],
    [0.7541666666666664, 14, 26.757920269503344],
    [0.8483333333333332, 10, 26.23161668995201],
    [0.9491666666666664, 6, 24.75809656324874],
    [0.9891666666666663, 2, 21.61931165882328],
]
d20 = [
    [0.3566666666666662, 94, 27.164112433307963],
    [0.41333333333333283, 90, 27.84639732158162],
    [0.4616666666666663, 86, 28.382331770789865],
    [0.500833333333333, 82, 28.721723682581114],
    [0.5333333333333329, 78, 28.940431716129737],
    [0.5649999999999996, 74, 29.159242599554574],
    [0.5941666666666664, 70, 29.323451608273583],
    [0.6224999999999996, 66, 29.459919437929585],
    [0.6449999999999996, 62, 29.527232177069035],
    [0.6674999999999996, 58, 29.60879332377995],
    [0.6908333333333331, 54, 29.684411195442305],
    [0.7099999999999996, 50, 29.71343737886865],
    [0.7291666666666664, 46, 29.737095466596273],
    [0.7583333333333332, 42, 29.77974784692127],
    [0.7799999999999999, 38, 29.755075579277676],
    [0.818333333333333, 34, 29.80528511315735],
    [0.8516666666666665, 30, 29.750887754412805],
    [0.8808333333333329, 26, 29.573119414499946],
    [0.9108333333333332, 22, 29.310621565331342],
    [0.9383333333333331, 18, 28.871876692122623],
    [0.9666666666666662, 14, 28.150956036499213],
    [0.9866666666666664, 10, 27.01585959298318],
    [0.9899999999999997, 6, 24.95772280709923],
    [0.9899999999999997, 2, 21.621915738784512],
]
d10.reverse()
data=np.array(d10)
d15.reverse()
data2=np.array(d15)
d20.reverse()
data3=np.array(d20)
i=0
while i<len(d10):
    print(f"{d10[i][1]},{d10[i][2]:.3f},{d15[i][2]:.3f},{d20[i][2]:.3f}")
    i+=1
# 提取自变量和因变量
x = data[:, 1]  # 第一列是自变量
y1 = data[:, 2]  # 第二列是因变量 y1
# y3 = data2[:, 1]  # 第三列是因变量 y2
x2 = data2[:, 1]  # 第一列是自变量
y2 = data2[:, 2]  # 第四列是因变量 y3
x3 = data3[:, 1]  # 第一列是自变量
y3 = data3[:, 2]  # 第四列是因变量 y3

# 生成平滑曲线的插值点
x_smooth = np.linspace(min(x), max(x), 300)  # 生成更密集的 x 值用于平滑曲线

# 对每条曲线进行样条插值
spline1 = make_interp_spline(x, y1, k=3)  # k=3 表示三次样条
y1_smooth = spline1(x_smooth)

x2_smooth = np.linspace(min(x2), max(x2), 300)  # 生成更密集的 x 值用于平滑曲线
spline2 = make_interp_spline(x2, y2, k=3)
y2_smooth = spline2(x2_smooth)

x3_smooth = np.linspace(min(x3), max(x3), 300)  # 生成更密集的 x 值用于平滑曲线
spline3 = make_interp_spline(x3, y3, k=3)
y3_smooth = spline3(x3_smooth)
#
# spline3 = make_interp_spline(x, y3, k=3)
# y3_smooth = spline3(x_smooth)

# 绘制原始数据和平滑曲线
plt.scatter(x, y1, label='0.010', color='blue')
plt.plot(x_smooth, y1_smooth, label='', color='blue', linestyle='-')

# 绘制原始数据和平滑曲线
plt.scatter(x2, y2, label='0.015', color='red')
plt.plot(x2_smooth, y2_smooth, label='', color='red', linestyle='-')

plt.scatter(x3, y3, label='0.020', color='green')
plt.plot(x3_smooth, y3_smooth, label='', color='green', linestyle='-')

# 绘制单个的点
# plt.plot(20,30,'ro')
# plt.plot(25,35,'ro')

# plt.scatter(x, y2, label='图片2压缩率', color='green')
# plt.plot(x_smooth, y2_smooth, label='图片2插值曲线', color='green', linestyle='-')

# plt.scatter(x, y3, label='ssim', color='red')
# plt.plot(x_smooth, y3_smooth, label='SSIM插值曲线', color='red', linestyle='-')

plt.ylabel('PSNR')
plt.xlabel('quality')
plt.legend()
plt.title('相同压缩率下PSNR与quality的关系')
plt.grid(True)
plt.show()
